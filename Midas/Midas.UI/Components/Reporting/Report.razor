@using Midas.Core.Constants
@using Midas.UI.Components.Reporting.ChartFactories
@using Midas.UI.Components.Reporting.TableFactories
@using Newtonsoft.Json;
@using Midas.Core.Models
@using Midas.UI.Components.Charts
@using Midas.UI.Models.Charts
@code {
    [Parameter, EditorRequired]
    public required AbsoluteDateTime StartTime { get; set; }
    [Parameter, EditorRequired]
    public required AbsoluteDateTime EndTime { get; set; }

    private double _durationMonths;

    [Parameter, EditorRequired]
    public required List<string> TimeStepLabels { get; set; }
    [Parameter, EditorRequired]
    public required List<decimal> SpendingPerTimeStep { get; set; }
    [Parameter, EditorRequired]
    public required List<decimal> IncomePerTimeStep { get; set; }
    [Parameter, EditorRequired]
    public required List<decimal> CashFlowPerTimeStep { get; set; }
    [Parameter, EditorRequired]
    public required List<(string CategoryName, List<decimal> Amounts)> CategoricalSpendingPerTimeStep { get; set; }

    [Parameter, EditorRequired]
    public required List<(string AccountName, decimal Income, decimal Spending, decimal CashFlow)> AccountSpending { get; set; }
    [Parameter, EditorRequired]
    public required (decimal Income, decimal Spending, decimal CashFlow) TotalSpending { get; set; }
    [Parameter, EditorRequired]
    public required List<(string CategoryName, decimal Amount)> CategoricalSpending { get; set; }
    [Parameter, EditorRequired]
    public required List<(string SupercategoryName, decimal Amount)> SupercategoricalSpending { get; set; }

    [Parameter, EditorRequired]
    public required List<(string AccountName, decimal Amount, int TransactionsCount, decimal AverageAmountPerTransaction)> TopIncomeSources { get; set; }
    [Parameter, EditorRequired]
    public required List<(string AccountName, decimal Amount, int TransactionsCount, decimal AverageAmountPerTransaction)> TopSpendingDestinations { get; set; }

    private ReportingChartFactory _chartFactory = default!;
    private ReportingTableDataFactory _tableDataFactory = default!;

    protected override void OnInitialized()
    {
        // +1 because end time is inclusive
        _durationMonths = ((EndTime - StartTime).TotalDays + 1) / MidasConstants.MonthsPerYear;

        _chartFactory = new()
        {
            CashFlowPerTimeStep = CashFlowPerTimeStep,
            TimeStepLabels = TimeStepLabels,
            SpendingPerTimeStep = SpendingPerTimeStep,
            IncomePerTimeStep = IncomePerTimeStep,
            SupercategoricalSpending = SupercategoricalSpending,
            CategoricalSpending = CategoricalSpending,
            TotalSpending = TotalSpending.Spending,
            TotalIncome = TotalSpending.Income,
        };

        _tableDataFactory = new()
        {
            AccountSpending = AccountSpending,
            DurationInMonths = _durationMonths,
            TotalSpending = TotalSpending.Spending,
            TotalIncome = TotalSpending.Income,
            TotalCashFlow = TotalSpending.CashFlow,
            CategoricalSpending = CategoricalSpending,
            SupercategoricalSpending = SupercategoricalSpending,
            TopIncomeSources = TopIncomeSources,
            TopSpendingDestinations = TopSpendingDestinations,
            StartTime = StartTime,
            EndTime = EndTime
        };
    }
}

<style>
    @@scope {
        .chart-wrapper {
            position: absolute;
            width: calc(100% - 3em); /* based on --bulma-message-body-padding */
            height: calc(100% - 2.5em);
        }

        .message-header {
            justify-content: flex-start;
            gap: 1rem;
        }

        .message a:not(.button):not(.tag):not(.dropdown-item) {
            color: var(--bulma-link-text);
            text-decoration: none;
        }
    }

</style>

<div class="panel is-link">
    <p class="panel-heading">Report - @StringFormatter.FormatDate(StartTime) to @StringFormatter.FormatDate(EndTime)</p>
    <div class="panel-block">
        <div class="control">
            <p class="title is-4">Summary</p>
            <ReportTable TableData="_tableDataFactory.CreateSummaryTable()" />
        </div>
    </div>
</div>


<ReportCard
    Data="@([
        ("Income vs Spending", _chartFactory.CreateIncomeSpendingChart()),
        ("Aggregate Cash Flow", _chartFactory.CreateAggregateCashFlowChart()),
        ("Cash Flow Trend", _chartFactory.CreateCashFlowTrendChart())])"
    Title="@("Cash Flow")"
 />

<div class="block">
    <div class="box">
        <div class="control">
            <p class="title is-4">Account Balance Breakdown</p>
            <ReportTable TableData="_tableDataFactory.CreateAccountBalanceTable()" />
        </div>
    </div>
</div>


<div class="block">
    <div class="columns is-multiline">
        <div class="column">
            @{
                var supercategoryDatum = new List<(string, Union<ChartConfiguration, ReportingTableData>)>
                {
                    ("Amount", _chartFactory.CreateSupercategoryAmountChart())
                };

                if (TotalSpending.Spending > 0)
                    supercategoryDatum.Add(("% Spending", _chartFactory.CreateSupercategorySpendingPercentChart()));
                if (TotalSpending.Income > 0)
                    supercategoryDatum.Add(("% Income", _chartFactory.CreateSupercategoryIncomePercentChart()));

                supercategoryDatum.Add(("Table", _tableDataFactory.CreateSupercategoricalSpendingTable()));
            }
            <ReportCard
                Data="@supercategoryDatum"
                Title="@("Supercategorical Spending")"
             />
        </div>
        <div class="column">
            @{
                var categoryDatum = new List<(string, Union<ChartConfiguration, ReportingTableData>)>
                {
                    ("Amount", _chartFactory.CreateCategoryAmountChart())
                };

                if (TotalSpending.Spending > 0)
                    categoryDatum.Add(("% Spending", _chartFactory.CreateCategorySpendingPercentChart()));
                if (TotalSpending.Income > 0)
                    categoryDatum.Add(("% Income", _chartFactory.CreateCategoryIncomePercentChart()));

                categoryDatum.Add(("Table", _tableDataFactory.CreateCategoricalSpendingTable()));
            }
            <ReportCard
                Data="@categoryDatum"
                Title="@("Categorical Spending")"
             />
        </div>
    </div>
</div>


<div class="block">
    <div class="message">
        <div class="message-header">
            <p>Categorical Spending Over Time</p>
        </div>
        <div class="message-body" style="position:relative;height:350px;">
            @{
                var categoricalSpendingChartConfiguration = new ChartConfiguration
                {
                    Type = ChartConfigurationType.Bar,
                    Data = new()
                    {
                        Labels = TimeStepLabels,
                        Datasets = CategoricalSpendingPerTimeStep
                            .Select(spending => new ChartDataSet
                            {
                                Label = spending.CategoryName,
                                Data  = spending.Amounts.Cast<object>().ToList(),
                            })
                            .ToList()
                    },
                    Options = new()
                    {
                        Plugins = new()
                        {
                            Tooltip = new()
                            {
                                Callbacks = new()
                                {
                                    Label = new()
                                    {
                                        Function = @"function(context) { 
                                            const rawValue = context.raw;
                                            const formattedValue = Math.abs(rawValue).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                                            return rawValue < 0 ? `${context.dataset.label}: -$${formattedValue}` : `${context.dataset.label}: $${formattedValue}`;
                                        }"
                                    }
                                }
                            }
                        },
                        Scales = new()
                        {
                            X = new()
                            {
                                Stacked = true
                            },
                            Y = new()
                            {
                                Stacked = true,
                                Ticks = new()
                                {
                                    Callback = new()
                                    {
                                        Function = @"function(value) { 
                                            const formattedValue = Math.abs(value).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                                            return value < 0 ? `-$${formattedValue}` : `$${formattedValue}`;
                                        }"
                                    }
                                },
                            }
                        }
                    }
                };

            }

            <div class="chart-wrapper">
                <Chart Configuration="@categoricalSpendingChartConfiguration"/>
            </div>

        </div>
    </div>
</div>

<div class="block">
    <div class="columns is-multiline">
        <div class="column">
            <div class="box">
                <div class="control">
                    <p class="title is-4">Top Income Sources</p>
                    <ReportTable TableData="_tableDataFactory.CreateTopIncomeSourcesTable()" />
                </div>
            </div>
        </div>
        <div class="column">
            <div class="box">
                <div class="control">
                    <p class="title is-4">Top Spending Destinations</p>
                    <ReportTable TableData="_tableDataFactory.CreateTopSpendingDestinationsTable()" />
                </div>
            </div>
        </div>
    </div>
</div>

