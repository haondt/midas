@using Haondt.Core.Extensions
@using Haondt.Core.Models
@using Midas.Domain.Import.Models
@using Midas.Domain.Import.Services
@using Midas.Domain.Shared.Services
@using Midas.Domain.Transactions.Services
@using Midas.UI.Shared.Components

@inject ITransactionService TransactionService
@inject IAsyncJobRegistry AsyncJobRegistry
@inject ITransactionImportService TransactionImportService

@code {
    public abstract class FilterData { }
    public class NumberFilterData : FilterData { }
    public class SelectFilterData : FilterData { public required List<string> Options { get; set; } }
    public class TextFilterData : FilterData { }
    public class AutocompleteFilterData : FilterData { public required string AutocompleteUri { get; set; } }

    [Parameter, EditorRequired]
    public required string JobId { get; set; }

    private Dictionary<string, FilterData> _targets = default!;



    protected override void OnInitialized()
    {
        var result = TransactionImportService.GetDryRunResult(JobId);
        var categories = new List<string>();
        var tags = new List<string>();

        if (result.IsSuccessful)
        {
            var tagsAndCategories = result.Value.Transactions
                .Select(q => q.TransactionData)
                .Where(q => q.HasValue)
                .Select(q => (q.Value.Category, q.Value.Tags));

            categories = tagsAndCategories
                .Select(q => q.Category)
                .Distinct()
                .Order()
                .ToList();
            tags = tagsAndCategories
                .SelectMany(q => q.Tags)
                .Distinct()
                .Order()
                .ToList();

            
        }

        _targets = new()
        {
            { TransactionImportFilterTargets.Amount, new NumberFilterData() },
            { TransactionImportFilterTargets.Category, new SelectFilterData{ Options = categories } },
            { TransactionImportFilterTargets.Tags, new SelectFilterData { Options = tags } },
            { TransactionImportFilterTargets.Description, new TextFilterData() },
            { TransactionImportFilterTargets.Status, new SelectFilterData
            {
                Options = [
                    TransactionImportStatus.Success,
                    TransactionImportStatus.Warning,
                    TransactionImportStatus.Error,
                ]
            } },
            { TransactionImportFilterTargets.Warning, new SelectFilterData
            {
                Options = [
                    TransactionImportWarning.MissingSourceAccount,
                    TransactionImportWarning.MissingDestinationAccount,
                    TransactionImportWarning.CreatingAccountWithSameNameAsExisting,
                    TransactionImportWarning.MissingCategory,
                    TransactionImportWarning.SourceDataHashExists,
                    TransactionImportWarning.WillUpdateExisting
                ]
            } },
            { TransactionImportFilterTargets.SourceAccountName, new AutocompleteFilterData { AutocompleteUri = $"/transaction-import/dry-run/{JobId}/search/complete/source-account" } },
            { TransactionImportFilterTargets.DestinationAccountName, new AutocompleteFilterData { AutocompleteUri = $"/transaction-import/dry-run/{JobId}/search/complete/destination-account" } },
            { TransactionImportFilterTargets.EitherAccountName, new AutocompleteFilterData { AutocompleteUri = $"/transaction-import/dry-run/{JobId}/search/complete/either-account" } },
        };

    }

    private List<string> _operators = new()
    {
        TransactionImportFilterOperators.IsEqualTo,
        TransactionImportFilterOperators.IsNotEqualTo,
        TransactionImportFilterOperators.Contains,
        TransactionImportFilterOperators.StartsWith,
    };
}



<div 
    id="modal-container"
    class="modal is-active is-justify-content-flex-start pt-6"
    hx-swap-oob="true">
    <div 
        class="modal-background"
        _="
            on click
                remove .is-active from #modal-container
                set #modal-container's innerHTML to ''
            end
            on keydown(key) from elsewhere
                if the key is 'Escape'
                    send click to me
                end
            end
        "></div>
    <div class="card">
        <style>
            @@scope {
                :scope {
                    max-height: calc(100% - var(--bulma-modal-card-spacing));
                    display: flex;
                    flex-direction: column;
                    width: 80rem;
                }

                .card-content {
                    overflow: auto;
                    overflow-y: scroll;
                }
            }
        </style>
        <header class="modal-card-head card-header">
            <p class="modal-card-title">Review Transactions</p>
            <button class="delete" _="on click send click to the previous .modal-background"></button>
        </header>
        <section class="card-content">
            <form class="mb-2 is-flex is-flex-direction-row " style="gap:1rem;"
                hx-post="/transaction-import/dry-run/@JobId/transactions/filter"
                hx-swap="none"
                _="on htmx:afterSwap
                    if event.detail.xhr.status == 200
                        then send submit to #filters">
                <div class="select ">
                    <select id="filter-target" name="target"
                        _="on change
                            set target to the first <option[value=$(my value)]/> in me
                            set current_input to the next <.target-input:not(.is-hidden)/>
                            set desired_input_id to `${my value}-input`
                            set desired_input to #{desired_input_id}
                            if current_input != desired_input
                                if current_input != null
                                    add .is-hidden to current_input
                                end
                                if desired_input != null
                                    remove .is-hidden from desired_input
                                    ">
                        @foreach(var target in _targets.Keys)
                        {
                            <option value="@target">@target</option>
                        }
                    </select>
                </div>
                <div class="select">
                    <select id="filter-target" name="operator">
                        @foreach(var op in _operators)
                        {
                            <option value="@op">@op</option>
                        }
                    </select>
                </div>
                @{
                    var isFirst = true;
                    foreach(var (target, data) in _targets)
                    {
                        var hiddenClass = isFirst ? "" : "is-hidden";
                        @switch (data)
                        {
                            case NumberFilterData:
                                <input name="@target-value" step=".01" id="@target-input" class="target-input input @hiddenClass" type="number"/>
                                break;
                            case SelectFilterData selectFilterData:
                                <div id="@target-input" class="target-input is-fullwidth select @hiddenClass">
                                    <select name="@target-value">
                                        @foreach(var option in selectFilterData.Options)
                                        {
                                            <option value="@option">@option</option>
                                        }
                                    </select>
                                </div>
                                break;
                            case AutocompleteFilterData autocompleteFilterData:
                                <div id="@target-input" class="target-input is-flex-grow-1 @hiddenClass" _="on htmx:afterSwap halt the event">
                                    <Autocomplete 
                                        Name="@($"{target}-value")" 
                                        SuggestionUri="@autocompleteFilterData.AutocompleteUri"  
                                    />
                                </div>
                                break;
                            case TextFilterData:
                            default:
                                <input id="@target-input" name="@target-value" class="target-input input @hiddenClass" type="text" />
                                break;
                        }
                        isFirst = false;
                    }
                }
                <button class="button">
                    Add filter
                </button>
            </form>
            <form hx-post="/transaction-import/dry-run/@JobId/transactions"
                class="field is-grouped is-grouped-multiline" id="filters"
                hx-target="#transactions-list" hx-swap="outerHTML"
                hx-include="#paginator"
                _="on submit set #transactions-list's innerHTML to ''">
            </form>

            <br/>
            <table class="table is-fullwidth">
                <thead>
                    <tr>
                        <th>Source</th>
                        <th>Destination</th>
                        <th>Description</th>
                        <th>Amount</th>
                        <th>Source data hash</th>
                        <th>Copy source request</th>
                    </tr>
                </thead>
                <tbody id="transactions-list" _="on load send submit to #filters">
                </tbody>
            </table>
            <div 
                data-loading="inherit" 
                data-loading-path="/transaction-import/dry-run/@JobId/transactions"
                class="loader is-loading" style="margin:auto;"></div>
        </section>
        <footer class="modal-card-foot">
        </footer>
    </div>
</div>