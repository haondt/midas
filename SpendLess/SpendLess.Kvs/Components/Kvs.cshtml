@using Haondt.Core.Models
@using Haondt.Web.Core.Components
@using SpendLess.Kvs.SpendLess.Kvs
@using SpendLess.Core.Extensions;
@using SpendLess.Web.Domain.SpendLess.Domain
@model KvsModel

@{


    Func<(bool IsSwap, string Model), object> createValueView =
    @<div id="value-view">
        <p class="title is-4">Value</p>
        <div class="field">
            <div class="buttons">
                <button class="button is-primary" 
                    hx-post="/_event/KvsUpsert" 
                    hx-include="#kvs-value,#kvs-key">Update</button>
                <button class="button" hx-post="/_event/JsonPrettifyCode" 
                    hx-target="#kvs-value"
                    hx-vals='{"name":"value"}'
                    hx-swap="innerHTML"
                    hx-include="#kvs-value">Prettify</button>
            </div>
        </div>

        <div id="kvs-value">
            await Html.PartialAsync(new CodeWindowModel
            {
                Name = "value",
                Text = item.Model,
            })
        </div>
    </div>
    ;

    Func<(bool IsSwap, KvsContentModel Model), object> createContentView =
    @<div id="kvs-content" @(item.IsSwap ? "hx-swap-oob=\"true\"" : "")>
        <div class="panel-block has-background-link-dark">
            <div class="control">
                createKeyView((false, item.Model.Key))
            </div>
        </div>
        <div class="panel-block">
            <div class="control">
                @await Html.PartialAsync(KvsModel.AliasListViewPath, (false, item.Model.Aliases))
            </div>
        </div>
        <div class="panel-block">
            <div class="control">
                @createValueView((false, item.Model.Value))
            </div>
        </div>
    </div>;
}

@if (Model is KvsLayoutModel layoutModel)
{
}
else if (Model is KvsInsertContentModel insertModel)
{
    @createContentView((true, insertModel))
@*     await Html.PartialAsync(new CloseModalModel());
 *@}
else if (Model is KvsUpdateContentModel updateModel)
{
@*     if (updateModel.Key.HasValue) { @createKeyView((true, updateModel.Key.Value ))}
    if (updateModel.Value.HasValue) { @createValueView((true, updateModel.Value.Value ))}
    if (updateModel.Aliases.HasValue) { @await Html.PartialAsync(KvsModel.AliasListViewPath, (true, updateModel.Aliases.Value ))}
    *@
}
else if (Model is KvsModalModel)
{
}
