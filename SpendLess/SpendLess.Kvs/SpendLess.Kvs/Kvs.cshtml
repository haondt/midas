@using Haondt.Core.Models
@using Haondt.Web.Core.Components
@using SpendLess.Kvs.SpendLess.Kvs
@using SpendLess.Core.Extensions;
@using SpendLess.Web.Core.Extensions
@using SpendLess.Web.Domain.SpendLess.Domain
@model KvsModel

@{
    var typeIdentity = ComponentDescriptor<KvsModel>.TypeIdentity;

    Func<(bool IsSwap, List<string> Model), object> createAliasListView =
    @<div id="alias-list-view" @(item.IsSwap ? "hx-swap-oob=\"true\"" : "")>
        <p class="title is-4">Aliases</p>
        <form class="block"  hx-post="/_event/KvsAddAlias" hx-include="#kvs-key">
            <div class="field has-addons">
                <div class="control is-expanded">
                    <input class="input" name="alias" placeholder="Alias" />
                </div>
                <div class="control">
                    <button class="button is-primary">Add alias</button>
                </div>
            </div>
        </form>
        <table class="table is-hoverable is-fullwidth">
            <tbody>
                @foreach(var alias in item.Model)
                {
                <tr>
                    <td>@alias</td>
                    <td>
                        <div class="is-flex is-flex-direction-column is-align-items-flex-end">
                            <div>
                                <button class="button is-small"
                                    _="
                                        set :dd to the next .dropdown
                                        on click toggle .is-active on :dd
                                        on click from elsewhere
                                            if the event's target is not in :dd
                                                remove .is-active from :dd">
                                    <span>actions</span>
                                    <span class="icon">
                                        <i class="fa-solid fa-caret-down"></i>
                                    </span>
                                </button>
                            </div>
                            <div class="dropdown is-right">
                                <div class="dropdown-menu">
                                    <div class="dropdown-content">
                                        <button class="dropdown-item" hx-post="/_event/KvsRemoveAlias"
                                            hx-include="#kvs-key"
                                            hx-vals='{"alias":"@alias"}'>
                                            <span class="icon has-text-danger">
                                                <i class="fa-solid fa-trash"></i>
                                            </span>
                                            <span>remove</span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </td>
                </tr>
                }
            </tbody>
        </table>
    </div>
    ;

    Func<(bool IsSwap, Optional<string> Model), object> createKeyView =
    @<div id="key-view" @(item.IsSwap ? "hx-swap-oob=\"true\"" : "")>
        @if(item.Model.HasValue)
        {
            <input type="hidden" id="kvs-key" name="key" value="@item.Model.Value" />
            <div class="is-flex is-flex-direction-row is-align-items-center is-justify-content-space-between">
                <p class="is-size-5 is-family-monospace">@item.Model.Value</p>
                <button class="button"
                    hx-get="/_component/@typeIdentity"
                    hx-vals='{"launch-select-modal":true}'
                    hx-swap="none">
                    Select Mapping
                </button>
            </div>
        }
        else
        {
            <button class="button"
                hx-get="/_component/@typeIdentity"
                hx-vals='{"launch-select-modal":true}'
                hx-swap="none">
                Select Mapping
            </button>
        }
    </div>;


    Func<(bool IsSwap, string Model), object> createValueView =
    @<div id="value-view">
        <p class="title is-4">Value</p>
        <div class="field">
            <div class="buttons">
                <button class="button is-primary" 
                    hx-post="/_event/KvsUpsert" 
                    hx-include="#kvs-value,#kvs-key">Update</button>
                <button class="button" hx-post="/_event/JsonPrettifyCode" 
                    hx-target="#kvs-value"
                    hx-vals='{"name":"value"}'
                    hx-swap="innerHTML"
                    hx-include="#kvs-value">Prettify</button>
            </div>
        </div>

        <div id="kvs-value">
            @await Html.PartialAsync(new CodeWindowModel
            {
                Name = "value",
                Text = item.Model,
            })
        </div>
    </div>
    ;

    Func<(bool IsSwap, KvsContentModel Model), object> createContentView =
    @<div id="kvs-content" @(item.IsSwap ? "hx-swap-oob=\"true\"" : "")>
        <div class="panel-block has-background-link-dark">
            <div class="control">
                @createKeyView((false, item.Model.Key))
            </div>
        </div>
        <div class="panel-block">
            <div class="control">
                @createAliasListView((false, item.Model.Aliases))
            </div>
        </div>
        <div class="panel-block">
            <div class="control">
                @createValueView((false, item.Model.Value))
            </div>
        </div>
    </div>;
}

@if (Model is KvsLayoutModel layoutModel)
{
    <div class="panel is-link" style="max-width:var(--spendless-form-page-width);margin:auto;">
        <p class="panel-heading">Key-Value Store</p>
        @if(layoutModel.Content.HasValue)
        {
            @createContentView((false, layoutModel.Content.Value))
        }
        else
        {
            <div id="kvs-content">
                <div class="panel-block has-background-link-dark">
                    <div class="control">
                        @createKeyView((false, new()))
                    </div>
                </div>
            </div>
        }
    </div>
}
else if (Model is KvsInsertContentModel insertModel)
{
    @createContentView((true, insertModel))
    @await Html.PartialAsync(new CloseModalModel())
}
else if (Model is KvsUpdateContentModel updateModel)
{
    if (updateModel.Key.HasValue) { @createKeyView((true, updateModel.Key.Value ))}
    if (updateModel.Value.HasValue) { @createValueView((true, updateModel.Value.Value ))}
    if (updateModel.Aliases.HasValue) { @createAliasListView((true, updateModel.Aliases.Value ))}
}
else if (Model is KvsModalModel)
{
    <div
        id="modal-container"
        class="modal is-active is-justify-content-flex-start pt-6"
        hx-swap-oob="true"
        hx-on::load="htmx.find('#kvs-autocomplete').focus()">
        <div 
            class="modal-background"
            _="
                on click
                    remove .is-active from #modal-container
                    set #modal-container's innerHTML to ''
                end
                on keydown(key) from elsewhere
                    if the key is 'Escape'
                        send click to me
                    end
                end
            "></div>
        <div class="modal-card">
            <header class="modal-card-head">
                <p class="modal-card-title">Select Mapping</p>
                <button class="delete" _="on click send click to the previous .modal-background"></button>
            </header>
            <section class="modal-card-body">
                <form hx-get="/_component/@typeIdentity">
                    <div class="field">
                        <label class="label">Search</label>
                        @await Html.PartialAsync(new AutocompleteBodyModel
                        {
                            SuggestionEvent = "KvsAutocomplete",
                            Name = new("search"),
                            Id = "kvs-autocomplete",
                            IsRight = true
                        })
                    </div>
                </form>
            </section>
            <footer class="modal-card-foot">
                <button id="test" class="button is-success" _="on click send submit to the previous <form/>">Open mapping</button>
            </footer>
        </div>
    </div>
}
