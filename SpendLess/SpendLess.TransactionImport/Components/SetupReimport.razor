@using Haondt.Core.Extensions
@using Haondt.Core.Models
@using Haondt.Identity.StorageKey
@using Haondt.Persistence.Services
@using Haondt.Web.Components
@using SpendLess.Persistence.Extensions
@using SpendLess.Accounts.Services
@using global::SpendLess.Domain.Models
@using global::SpendLess.Persistence.Services
@using global::SpendLess.TransactionImport.Models

@inject IAccountsService AccountsService
@inject IStorage Storage 
@inject ISingleTypeSpendLessStorage<TransactionImportAccountMetadataDto> accountMetadataStorage

@code {
    [Parameter]
    public SetupSelectTransactionsField? SelectTransactionsField { get; set; }

    private Dictionary<string, string> _accounts { get; set; } = [];
    private List<string> _configurations { get; set; } = [];
    private Dictionary<string, string> _accountDefaultConfigurations { get; set; } = [];
    protected override async Task OnInitializedAsync()
    {
        var accounts = await AccountsService.GetAccountsIncludedInNetWorth();
        _accounts = accounts.ToDictionary(
            kvp => kvp.Key,
            kvp => kvp.Value.Name);


        _configurations = (await Storage.GetDefault(StorageKey<TransactionImportConfigurationSlugsDto>.Empty)).Slugs;

        var accountMetadatas = await accountMetadataStorage.GetAll();
        foreach(var (key, value) in accountMetadatas)
        {
            if (!value.DefaultConfiguration.HasValue)
                continue;
            _accountDefaultConfigurations[key.SingleValue()] = value.DefaultConfiguration.Value;
        }
    }
}

<form id="setup" 
    hx-post="/transaction-import/dry-run" 
    hx-swap="innerHTML"
    hx-target="#dry-run-result">

    <input type="hidden" name="is-reimport" value="true" />

    @if(SelectTransactionsField != null)
    {
        <ObjectComponentT Component="@SelectTransactionsField" />
    }
    else
    {
        <SetupSelectTransactionsField />
    }


    <div class="field">
        <label class="label">Account</label>
        <div class="control">
            <div class="select">
                <select name="account"
                    _="on change 
                        set account to the first <option[value='$(my value)']/> in me 
                        set defaultConfig to the account's @@sl-default-config
                        if defaultConfig is not null
                            set (the next <select/>)'s value to defaultConfig
                        ">
                        @foreach (var (id, name) in _accounts)
                        {
                            var attributes = new Dictionary<string, object>();
                            if (_accountDefaultConfigurations.TryGetValue(id, out var configId))
                                attributes["sl-default-config"] = configId;
                            <option
                                @attributes="attributes"
                                value="@id">
                                @name
                            </option>
                        }
                        <option
                            selected
                            value="">
                            Use Existing Account and Configuration
                        </option>
                </select>
            </div>
        </div>
    </div>

    <SetupConfigurationField 
        IsSwap="@false" 
        Configurations="_configurations"/>

    <hr/>
    <div id="preprocess-file-controls">
        <div class="field">
            <div class="control">
                <button 
                    class="button is-primary">
                    Reprocess Transactions
                </button>
            </div>
        </div>
    </div>
</form>
