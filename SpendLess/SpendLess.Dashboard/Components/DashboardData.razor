@using SpendLess.Charts.BarChart
@using SpendLess.Charts.Components
@using SpendLess.Charts.LineChart
@using SpendLess.Charts.Models
@using SpendLess.Dashboard.Models
@using SpendLess.Web.Domain.Services
@code {
    [Parameter, EditorRequired]
    public required decimal CashFlow { get; set; }
    [Parameter, EditorRequired]
    public required DashboardChartDataDto ChartData { get; set; }
}


<div class="block">
    <div class="columns is-desktop">
        <div class="column">
            <div class="notification">
                @if (CashFlow == 0)
                {
                    <p class="is-size-4">@StringFormatter.FormatCurrency(CashFlow)</p>
                }
                else if(CashFlow > 0)
                {
                    <p class="is-size-4 has-text-success">+@StringFormatter.FormatCurrency(CashFlow)</p>
                }
                else
                {
                    <p class="is-size-4 has-text-danger">@StringFormatter.FormatCurrency(CashFlow, false)</p>
                }
                <p class="subtitle is-6">Cash flow</p>
            </div>
        </div>
        <div class="column">
            <div class="notification is-success">
                <p class="is-size-4">$1,000,000.00</p>
                <p class="subtitle is-6">Income</p>
            </div>
        </div>
        <div class="column">
            <div class="notification is-danger">
                <p class="is-size-4">$1,000,000.00</p>
                <p class="subtitle is-6">Spending</p>
            </div>
        </div>

    </div>
</div>

<div class="block">
    <div class="columns is-desktop">
        <div class="column">
            <div class="box">
                @{
                    var chartConfiguration = new LineConfiguration
                    {
                        Data = new()
                        {
                            Labels = ChartData.TimeStamps.Select(t => StringFormatter.FormatDate(t)).ToList(),
                            Datasets = ChartData.Balances.Select((b, i) => new ChartDataSet
                            {
                                Label = ChartData.AccountNames[i],
                                Data = b.Cast<object>().ToList(),
                                Fill = false,
                                Tension = 0.5
                            }).ToList()
                        },
                        Options = new()
                        {
                            Plugins = new()
                            {
                                Legend = new()
                                {
                                    Display = true,
                                    Position = "top" 
                                },
                                Tooltip = new()
                                {
                                    Callbacks = new()
                                    {
                                        Label = new()
                                        {
                                            Function = "function(context) { return `$${context.raw.toFixed(2)}`; }"
                                        }
                                    }
                                }
                            },
                            Scales = new()
                            {
                                X = new()
                                {
                                    Ticks = new()
                                    {
                                        MaxRotation = 45,
                                        MinRotation = 45
                                    }
                                },
                                Y = new()
                                {
                                    Ticks = new()
                                    {
                                        Callback = new()
                                        {
                                            Function = "function(value) { return `$${value.toFixed(2)}`; }"
                                        }
                                    },
                                    BeginAtZero = true
                                }
                            }
                        }
                    };

                    <Chart Configuration="@chartConfiguration"/>

                }
            </div>

        </div>
        <div class="column">
            <div class="box">

            </div>
        </div>
    </div>

</div>
